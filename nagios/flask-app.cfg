# Nagios Configuration for Flask TODO App
# Place this file in /usr/local/nagios/etc/objects/

###############################################################################
# HOST DEFINITIONS
###############################################################################

# Define the Flask App ALB host
define host {
    use                     linux-server
    host_name               flask-app-alb
    alias                   Flask TODO App Load Balancer
    address                 flask-todo-app-alb-123456789.us-west-2.elb.amazonaws.com
    check_command          check-host-alive
    max_check_attempts     3
    check_period           24x7
    contact_groups         admins
    notification_interval  30
    notification_period    24x7
    notifications_enabled  1
}

# Define ECS Cluster as a host group
define hostgroup {
    hostgroup_name  flask-app-ecs
    alias           Flask App ECS Services
    members         flask-app-alb
}

###############################################################################
# SERVICE DEFINITIONS
###############################################################################

# HTTP Health Check
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     HTTP Health Check
    check_command          check_http!-H flask-todo-app-alb-123456789.us-west-2.elb.amazonaws.com -u /health -e "HTTP/1.1 200 OK"
    max_check_attempts     3
    normal_check_interval  2
    retry_check_interval   1
    check_period           24x7
    notification_interval  30
    notification_period    24x7
    notifications_enabled  1
    contact_groups         admins
}

# HTTP Response Time
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     HTTP Response Time
    check_command          check_http!-H flask-todo-app-alb-123456789.us-west-2.elb.amazonaws.com -u /health -w 2 -c 5
    max_check_attempts     3
    normal_check_interval  5
    retry_check_interval   2
    check_period           24x7
    notification_interval  30
    notification_period    24x7
    notifications_enabled  1
    contact_groups         admins
}

# SSL Certificate Check (if HTTPS is enabled)
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     SSL Certificate
    check_command          check_http!-H flask-todo-app-alb-123456789.us-west-2.elb.amazonaws.com --ssl -C 30,14
    max_check_attempts     3
    normal_check_interval  60
    retry_check_interval   10
    check_period           24x7
    notification_interval  1440
    notification_period    24x7
    notifications_enabled  1
    contact_groups         admins
}

# API Endpoint Check
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     API Todos Endpoint
    check_command          check_http!-H flask-todo-app-alb-123456789.us-west-2.elb.amazonaws.com -u /api/todos -e "HTTP/1.1 200 OK"
    max_check_attempts     3
    normal_check_interval  5
    retry_check_interval   2
    check_period           24x7
    notification_interval  30
    notification_period    24x7
    notifications_enabled  1
    contact_groups         admins
}

# Database Connection Check (if using external DB)
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     Database Connection
    check_command          check_http!-H flask-todo-app-alb-123456789.us-west-2.elb.amazonaws.com -u /health -s "healthy"
    max_check_attempts     3
    normal_check_interval  5
    retry_check_interval   2
    check_period           24x7
    notification_interval  30
    notification_period    24x7
    notifications_enabled  1
    contact_groups         admins
}

###############################################################################
# COMMAND DEFINITIONS
###############################################################################

# Custom command for checking Flask app health
define command {
    command_name    check_flask_health
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -u /health -s "healthy" -w 2 -c 5
}

# Custom command for checking Flask app with JSON response
define command {
    command_name    check_flask_api
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -u /api/todos -e "200 OK" -w 3 -c 6
}

# Custom command for checking ECS service status via AWS CLI
define command {
    command_name    check_ecs_service
    command_line    $USER1$/check_ecs_service.sh $ARG1$ $ARG2$ $ARG3$
}

###############################################################################
# CONTACT DEFINITIONS
###############################################################################

define contact {
    contact_name                    flask-app-admin
    use                            generic-contact
    alias                          Flask App Administrator
    email                          admin@yourcompany.com
    pager                          +1234567890
    can_submit_commands            1
    retain_status_information      1
    retain_nonstatus_information   1
    host_notification_period       24x7
    service_notification_period    24x7
    host_notification_options      d,u,r,f,s
    service_notification_options   w,u,c,r,f,s
    host_notification_commands     notify-host-by-email,notify-host-by-sms
    service_notification_commands  notify-service-by-email,notify-service-by-sms
}

define contactgroup {
    contactgroup_name   flask-app-admins
    alias               Flask App Administrators
    members             flask-app-admin
}

###############################################################################
# AWS CLOUDWATCH INTEGRATION
###############################################################################

# ECS Service Running Tasks
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     ECS Service Running Tasks
    check_command          check_ecs_service!flask-todo-app-cluster!flask-todo-app-service!2
    max_check_attempts     3
    normal_check_interval  5
    retry_check_interval   2
    check_period           24x7
    notification_interval  30
    notification_period    24x7
    notifications_enabled  1
    contact_groups         flask-app-admins
}

# ALB Target Health
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     ALB Healthy Targets
    check_command          check_alb_targets!flask-todo-app-alb!2
    max_check_attempts     3
    normal_check_interval  5
    retry_check_interval   2
    check_period           24x7
    notification_interval  30
    notification_period    24x7
    notifications_enabled  1
    contact_groups         flask-app-admins
}

# CloudWatch CPU Utilization
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     ECS CPU Utilization
    check_command          check_cloudwatch_metric!CPUUtilization!AWS/ECS!ServiceName=flask-todo-app-service,ClusterName=flask-todo-app-cluster!80!90
    max_check_attempts     3
    normal_check_interval  10
    retry_check_interval   5
    check_period           24x7
    notification_interval  60
    notification_period    24x7
    notifications_enabled  1
    contact_groups         flask-app-admins
}

# CloudWatch Memory Utilization
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     ECS Memory Utilization
    check_command          check_cloudwatch_metric!MemoryUtilization!AWS/ECS!ServiceName=flask-todo-app-service,ClusterName=flask-todo-app-cluster!80!90
    max_check_attempts     3
    normal_check_interval  10
    retry_check_interval   5
    check_period           24x7
    notification_interval  60
    notification_period    24x7
    notifications_enabled  1
    contact_groups         flask-app-admins
}

###############################################################################
# ESCALATION AND DEPENDENCY DEFINITIONS
###############################################################################

# Service escalation for critical issues
define serviceescalation {
    host_name               flask-app-alb
    service_description     HTTP Health Check
    first_notification      3
    last_notification       0
    notification_interval   15
    escalation_period       24x7
    escalation_options      w,c,r
    contact_groups          flask-app-admins
}

# Service dependency - API depends on health check
define servicedependency {
    host_name                       flask-app-alb
    service_description             HTTP Health Check
    dependent_host_name             flask-app-alb
    dependent_service_description   API Todos Endpoint
    execution_failure_criteria     w,c,u,p
    notification_failure_criteria  w,c,u,p
}

###############################################################################
# PERFORMANCE DATA AND GRAPHING
###############################################################################

# Enable performance data processing for graphs
define service {
    use                     generic-service
    host_name               flask-app-alb
    service_description     Performance Metrics
    check_command          check_flask_performance
    max_check_attempts     3
    normal_check_interval  5
    retry_check_interval   2
    check_period           24x7
    process_perf_data      1
    retain_status_information      1
    retain_nonstatus_information   1
    notifications_enabled  0
    contact_groups         flask-app-admins
}

###############################################################################
# ADDITIONAL CUSTOM COMMANDS
###############################################################################

# Command to check ALB target health
define command {
    command_name    check_alb_targets
    command_line    $USER1$/check_alb_targets.sh $ARG1$ $ARG2$
}

# Command to check CloudWatch metrics
define command {
    command_name    check_cloudwatch_metric
    command_line    $USER1$/check_cloudwatch.sh $ARG1$ $ARG2$ $ARG3$ $ARG4$ $ARG5$
}

# Command to check Flask app performance
define command {
    command_name    check_flask_performance
    command_line    $USER1$/check_http -H $HOSTADDRESS$ -u /health -w 1 -c 3 -t 10
}