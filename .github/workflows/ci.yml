name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    

    
permissions:
  contents: read
  actions: read
  security-events: write
  id-token: write
  pull-requests: write
  deployments: write
  
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: flask-todo-app-app
  ECS_SERVICE: flask-todo-app-service
  ECS_CLUSTER: flask-todo-app-cluster
  ECS_TASK_DEFINITION: flask-todo-app-task
  CONTAINER_NAME: flask-todo-app-container

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        cd app
        python -m pytest --cov=. --cov-report=xml || echo "No tests found"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage.xml
        flags: unittests

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    outputs:
      image-tag: ${{ steps.image.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set image tag
      id: image
      run: |
        echo "image-tag=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.image.outputs.image-tag }}
      run: |
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image.outputs.image-tag }}
        format: 'sarif'
        output: 'docker-trivy-results.sarif'

    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('docker-trivy-results.sarif') != ''
      with:
        sarif_file: 'docker-trivy-results.sarif'

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
      application_url: ${{ steps.verify.outputs.application_url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              required_contexts: [],
              environment: 'production',
              auto_merge: false
            });
            console.log('Deployment created with ID:', response.data.id);
            return response.data.id.toString();

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download or create task definition
        run: |
          # Try to download existing task definition, create new one if it doesn't exist
          if ! aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json 2>/dev/null; then
            echo "Task definition not found, creating a new one..."
            cat > task-definition.json << EOF
          {
            "family": "$ECS_TASK_DEFINITION",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "$CONTAINER_NAME",
                "image": "${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ needs.build-and-push.outputs.image-tag }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 5000,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/flask-todo-app",
                    "awslogs-region": "$AWS_REGION",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
            
            # Create log group if it doesn't exist
            aws logs create-log-group --log-group-name /ecs/flask-todo-app || true
            
            # Register the new task definition
            aws ecs register-task-definition --cli-input-json file://task-definition.json
            
            # Download the newly created task definition
            aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json
          fi
 
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image-tag }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify deployment
        id: verify
        run: |
          APP_URL=$(aws elbv2 describe-load-balancers --names flask-todo-app-alb --query 'LoadBalancers[0].DNSName' --output text)
          echo "Application URL: $APP_URL"
          echo "application_url=$APP_URL" >> $GITHUB_OUTPUT

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Debug Deployment Information
        run: |
          echo "deployment_id=${{ needs.deploy.outputs.deployment_id }}"
          echo "deploy_result=${{ needs.deploy.result }}"
          echo "application_url=${{ needs.deploy.outputs.application_url }}"

      - name: Notify GitHub Deployment Status
        uses: actions/github-script@v6
        if: needs.deploy.outputs.deployment_id != ''
        env:
          DEPLOYMENT_ID: ${{ needs.deploy.outputs.deployment_id }}
          DEPLOY_RESULT: ${{ needs.deploy.result }}
          APPLICATION_URL: ${{ needs.deploy.outputs.application_url || '' }}
        with:
          script: |
            const deploymentId = process.env.DEPLOYMENT_ID;
            const deploymentStatus = process.env.DEPLOY_RESULT === 'success' ? 'success' : 'failure';
            
            console.log('Deployment ID:', deploymentId);
            console.log('Deployment Status:', deploymentStatus);
            console.log('Application URL:', process.env.APPLICATION_URL);
            
            if (!deploymentId || deploymentId === 'undefined' || deploymentId === 'null') {
              console.log('No valid deployment ID found, skipping status update');
              return;
            }
            
            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: parseInt(deploymentId),
                state: deploymentStatus,
                description: `Deployment ${deploymentStatus}`,
                environment_url: process.env.APPLICATION_URL || null
              });
              console.log('Deployment status updated successfully');
            } catch (error) {
              console.error('Failed to update deployment status:', error);
              throw error;
            }

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Delete old ECR images
      run: |
        # Keep only the 10 most recent images
        aws ecr list-images --repository-name $ECR_REPOSITORY --filter tagStatus=UNTAGGED --query 'imageIds[:-10]' --output json | \
        jq '.[]' | \
        while read -r imageId; do
          aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids "$imageId" || true
        done
